In this section, we showcase the capability of PREDATOR
to detect new vulnerabilities in real-world web applications.
We include 22 popular web applications from previous
work [6, 12, 15, 16, 38] and select the latest versions that
are compatible with PHP 7. We first analyze the applications
using TChecker, subsequently providing the potential vulner-
able targets to PREDATOR for automated dynamic validation.
We set the time budget to 24 hours for each application.
The dataset, static analysis reports, and results after dynamic
validation by PREDATOR are > summarized 1 in Table 7.

nme
PREDATOR identified a total of 26 new vulnerabilities,
including 11 XSS and 15 SQLi vulnerabilities. PREDATOR
detects new vulnerabilities by validating the reports of static
analysis tools. Specifically, as a directed fuzzer, PREDATOR
sets the target locations based on the static analysis results. If
the target locations do contain vulnerabilities, PREDATOR can
trigger them automatically, thereby reducing the manual ef-
fort needed to validate the static analysis reports. PREDATOR
found no new vulnerabilities in applications such as Word-
Press, phpBB, and Joomla, as the potentially vulnerable
locations identified by TChecker did not contain any vulner-
abilities. This finding is consistent with the results presented
in the paper [6]. We also used Witcher to analyze the
applications with the same time budget, but it only detected
7 out of 26 vulnerabilities. We have responsibly reported
the vulnerabilities to the respective vendors. At the time of
writing, 7 XSS vulnerabilities have been acknowledged and
patched, 6 new CVE IDs (CVE-2024-404[47-52]) have
been assigned.

Our detection approach offers two kev advantages. First.
Our detection approach offers two key advantages. First,
we observed only 2 false positives for XSS during the
validation process, indicating that vulnerabilities confirmed
by PREDATOR generally do not require additional manual
TABLE 7: The results of automated validation for new vulnerabil-
ities.
effort. This allows limited human resources to be focused
on auditing unconfirmed reports. Second, developers can
promptly patch vulnerabilities confirmed by PREDATOR,
saving time and reducing the potential damage of the
vulnerabilities compared to patching after manual auditing,
which may take weeks or even 1 months.
We discovered that TChecker encountered errors when
analyzing certain applications, such as ForkCMS and Suite-
CRM. This limitation pertains to the static analysis tool used,
rather than to PREDATOR. Moreover, it is important to note
that the current XSS detector inherently has the potential for
false positives, which is a limitation due to implementation
issues. Developing more advanced detectors could overcome
this limitation.