Fuzzing has been extensively applied to detect vulnera-
bilities in a wide range of software systems, including web
applications. They can generally be categorized based on
the information they rely on, falling into two main groups:
black-box fuzzing (scanning) and grey-box fuzzing. Black-
box scanning operates under the assumption of no prior
internal information about the target web application. For
instance, Black Widow [12] and Enemy of the State [13]
exemplify black-box approaches by modeling navigation and
constructing the state graph of web applications without prior
internal knowledge. On the other hand, grey-box fuzzing
assumes the availability of such information, such as code
coverage feedback. Atropos [18] applies snapshot-based
techniques to fuzz web applications and infers parameter
keys and values at runtime. WebFuzz [15] instruments the
target web applications for code coverage feedback and
Witcher [16] enhances the runtime.
Witcher tests web applications using PHP common
gateway interface (CGI) binary. The fuzzing process orches-
trated by Witcher unfolds in two distinct phases. Initially,
it functions as a black-box crawler that discovers pages
and parameters. In the second phase, Witcher utilizes the
discovered request information as the foundational seeds
for the fuzzer. Following this, Witcher generates random
payloads to populate GET, POST, and COOKIE. To enhance
the effectiveness of the fuzzing process, Witcher incorporates
an HTTP parameter mutator and HTTP dictionary mutator.
The former facilitates the cross-pollination of interesting
parameter names and values, while the latter introduces
new key-value pairs to the test cases. A dynamic coverage
feedback mechanism based on the PHP opcodes is also
implemented to guide the fuzzing process.