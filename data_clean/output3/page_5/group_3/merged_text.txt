We need to achieve three main tasks using static analysis
techniques. First, we analyze control dependencies to extract
entry URLs for the specified targets and compute block-
level distances. Second, we assess data dependencies to
construct the input corpus. This step involves identifying how
data flows through the application, which helps determine
which parameters are influential in reaching and testing
different code paths. By analyzing data dependencies, we
can create a targeted input corpus that effectively stimulates
diverse application behaviors during fuzzing. Third, to gather
distance feedback at runtime and leverage it for power
scheduling and seed selection, we need to develop a suitable
instrumentation mechanism.