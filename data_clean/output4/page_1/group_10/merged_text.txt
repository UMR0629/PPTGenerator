To narrow the search
scope, we statically identify the entry scripts and their
corresponding entry URLs essential for reaching the target
code locations. We perform a backward analysis, starting
from the target locations and tracing back to the entry scripts.

TITTT? ， 1 *， es ee ce & _ _
from the target locations and tracing Oack LO the entry Scripts.

PHP’s inclusion mechanism alters the execution flow
by dynamically injecting additional scripts into the runtime
environment. Code in a script might be executed by other
scripts that include it through statements like requireO and
included). For a given target, an intuitive approach is to
consider all scripts that ultimately include the target’s script
as entry scripts. However, this approach is too coarse-grained
and considered impractical, as a script can be recursively
included by other scripts. It could result in a large number
of potential entry scripts, although many of them do not lead
to the target code location.
We propose to use call chain and script inclusion chain
analysis to determine which scripts receive user requests and
direct to the target code locations. This process leverages
the principle that if a target is in a function body, tracing the
call chain can pinpoint the entry functions that initiate the
execution. Essentially, a call chain provides a roadmap of
function calls, detailing each step from the entry functions to
the target. The script inclusion chain analysis then identifies
only the scripts that include the known entry scripts.

Call Chain Analysis. We trace the call chain backward
from the target to determine which scripts originally initiate
Call Chain Analysis. We trace the call chain backward
from the target to determine which scripts originally initiate
the control flow. We build a call graph by analyzing the
inter-procedural control flow of the application to assist in
identifying the entry scripts. Each function along the path
possesses zero, one, or multiple call edges linking it to its
call sites. We meticulously track these call edges to pinpoint
the entry functions and record the scripts in which they are
invoked. These scripts are then marked as entry scripts. If a
target is not within a function body, we consider the scripts
containing the target as entry scripts.
Script Inclusion Chain Analysis. We assess the script
inclusion chain to identify which scripts include the entry
scripts, consequently designating those as entry scripts as
well. Then, we convert the file system paths of the entry
scripts into entry URLs. They are then fed into the fuzzer
to indicate the scripts responsible for processing test cases.