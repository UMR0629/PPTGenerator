We implement a prototype of PREDATOR comprising
around 2,300 lines of code, which includes 1,500 lines of
C code for directed fuzzing, and 800 lines of Python code
for lightweight static analysis. The main components of
PREDATOR is built atop Witcher [16], a grey-box coverage-
guided fuzzer for web applications. We could implement
PREDATOR based on Atropos, but its code is not available at
the time of writing. The static analysis part is realized atop
PHPJoern [10] and TChecker [6]. Next, we discuss several
important implementation details.
Static Analysis. To identify potential targets for dynamic
validation, we utilize TChecker [6]. It is a context-sensitive
inter-procedural static analysis toodemonstrate the potential to detect taint-style vulnerabilities
using PREDATOR.