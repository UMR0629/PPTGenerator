Although directed fuzzing technique is well-developed
for native programs [23-29], it is not widely available for
web applications. To the best of our knowledge, Cefuzz [30]
is the only directed fuzzer for exclusively detecting remote
code execution (RCE) vulnerabilities. However, there are
several limitations to Cefuzz. 1) Cefuzz uses a coarse-grained
feedback mechanism, which fails to accurately reflect the
distance between the seed and the target. It prioritizes seeds
based on the number of reachable basic blocks (i.e., blocks
from which a path to the target exists on the control-flow
graph (CFG)) they pass through, which does not accurately
reflect the potential of the seeds. When there are multiple
paths of different lengths that can eventually reach the target
code, Cefuzz tends to give priority to the seed that takes
the longest path. 2) Cefuzz performs static instrumentation,
which increases the script length and risks altering the
behavior of the application. It inserts echo statements before
and after statements using the concatenation (i.e., new_line =
"echo(’x’);\n".old_line."echo(’y’);\n";). In such cases, if the
branch statements do not correctly use curly braces to
encapsulate the statements, it can lead to unpredictable
consequences. 3) Cefuzz is closed-source, which limits its