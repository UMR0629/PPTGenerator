We provide an example in Listing | based on common
practices in real-world PHP applications to better illustrate
this challenge. There are two main concerns: 1) Some static
analysis tools designed for PHP use method names for match-
ing and constructing call edges [6, 10]. In scenarios where
the target application contains multiple classes with methods
sharing the same name, e.g., fooQ in Listing |, these tools
fail to construct an accurate call graph (CG). In this context,
some paths can hardly be accurately identified. However,
these overlooked paths can be reachable to the target lo-
cation. In the example, we can only identify the execution
path $ClassA::foo() using these static analysis tools, but
remain unaware of the second path $ClassB->foo(), even
if the second path can trigger the vulnerability more easily.
2) The code dynamically invokes methods based on variable
values ($cName and $mName), making it challenging for static
analysis tools to accurately infer all possible execution paths.
This feature is also known as variable function calls, which
are common in PHP applications. For example, current static
analysis tools cannot derive the call edge from line 33 to
line 18. When attempting to calculate distances, the results
can be imprecise or even erroneous.