a result, the tool might label code as vulnerable when certain
conditions for a vulnerability to be triggered may never
materialize at runtime. Furthermore, dynamic languages
such as PHP introduce complexities in their features and
execution behaviors, which static analysis tools often struggle
to precisely model [31]. These issues necessitate extensive
manual review and validation, which becomes a bottleneck
in the efficiency of static analysis tools. Dynamic analysis
tools for web applications primarily utilize coverage-guided
strategies. They implement random exploration techniques,
aiming to traverse through various execution paths in search
of potential security vulnerabilities. However, this approach
faces limitations due to the intrinsic uneven distribution of
vulnerabilities within an application, with most vulnerabilities
often residing in specific, critical functions. This approach
makes random exploration inefficient, as it does not focus on
code segments with higher likelihood of containing vulner-
abilities. Moreover, deep vulnerabilities require navigating
through complex execution paths, which existing coverage-
guided fuzzing might not effectively address.

RAT_ ey ，，，_ _ 1"* 1 _ 、 1 1 *1* Oe ，  _ ~ 1 _