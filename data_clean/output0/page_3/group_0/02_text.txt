Witcher tests web applications using PHP common
gateway interface (CGI) binary. The fuzzing process orches-
trated by Witcher unfolds in two distinct phases. Initially,
it functions as a black-box crawler that discovers pages
and parameters. In the second phase, Witcher utilizes the
discovered request information as the foundational seeds
for the fuzzer. Following this, Witcher generates random
payloads to populate GET, POST, and COOKIE. To enhance
the effectiveness of the fuzzing process, Witcher incorporates
an HTTP parameter mutator and HTTP dictionary mutator.
The former facilitates the cross-pollination of interesting
parameter names and values, while the latter introduces
new key-value pairs to the test cases. A dynamic coverage
feedback mechanism based on the PHP opcodes is also
implemented to guide the fuzzing process.