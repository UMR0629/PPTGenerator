An targeted
input corpus fosters the generation and mutation of test cases
to reach the target code locations effectively. We conduct
an inter-procedural backward data-flow analysis to identify
critical request parameters that may influence the execution
paths (i.e., control flow) of the target application. The input
corpus comprises request parameter keys along with potential
values that can be assigned to them, enabling the fuzzer to
generate test cases effectively. Furthermore, we mark the
parameters that affect the condition expression of a branch
statement as its dependent parameters. These dependent
parameters guide the mutation mechanism, which will be
detailed in ยง4.3.2.
The simplified workflow is shown in Algorithm |. Specif-
ically, we first identify all branch statements (BS) along the
control flow paths that extend from the entry scripts to the
specified target. For each branch statement in BS, we extract
all request parameters into RP and add the ones that influence
the condition expressions to the dictionary DP by tracing the
data-flow path backward. We then analyze the AST nodes
along the path to extract all possible values of the request
parameters and store them in V, specifically extracting all
relevant right-hand values from assignments, conditional
statements, efc. Finally, we append all these possible values
together with the request parameters into the dictionary DR.
Take the code in Listing | as an example. The server-side
script chooses which function to call based on the value of
$action. We identify that $a is the dependent parameter
influencing the value of $action in the branch statements
on lines 9, 11, and 19. We then extract all potential values
of $a, which include lookup, edit, and defaultAction.